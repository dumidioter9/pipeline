import*as i from"fs";import{dirname as c}from"path";import l from"./../format-bytes.js";import $ from"./../files.js";var z=async(m,p,n=2,u="",w,y=async t=>t,d=async t=>await i.promises.readFile(t,"utf-8"))=>{const t={files:0,total:0};for(const f of(await new $().in(m).by(p)).not(w).results){const e=f[0],s=f[1];try{const o=(await i.promises.stat(e)).size,r=await y(await d(e));if(!r)continue;if(o>Buffer.byteLength(r)){try{await i.promises.access(c(s),i.constants.W_OK)}catch{await i.promises.mkdir(c(s),{recursive:!0})}await i.promises.writeFile(s,r,"utf-8");const a=(await i.promises.stat(s)).size;t.files++,t.total+=o-a,n>1&&console.info(`\x1B[32mCompressed ${e} for ${await l(o-a)} (${((o-a)/o*100).toFixed(2)}% reduction) in ${s} .\x1B[39m`)}}catch{console.log(`Error: Cannot compress file ${e}!`)}}n>0&&t.files>0&&console.info(`\x1B[32mSuccessfully compressed a total of ${t.files} ${u.toUpperCase()} ${t.files===1?"file":"files"} for ${await l(t.total)}.\x1B[39m`)};export{z as default};

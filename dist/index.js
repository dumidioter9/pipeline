import{deepmerge as s}from"deepmerge-ts";import i from"./options/index.js";import p from"./lib/compress/pipe-all.js";import e from"./options/lib/compress/index.js";import n from"./lib/critters/pipe-all.js";import r from"./options/lib/critters/index.js";class a{options;paths=new Set;mergeDefaultOptions(t){for(const o in this.options)Object.prototype.hasOwnProperty.call(t,o)&&this.options[o]===!0&&(this.options[o]=t[o]);if(this.options=s(t,this.options),typeof this.options.path<"u")if(this.options.path instanceof Array||this.options.path instanceof Set)for(const o of this.options.path)this.paths.add(o);else this.paths.add(this.options.path)}constructor(t={}){this.options=t,this.mergeDefaultOptions(i)}async compress(){this.mergeDefaultOptions(e);for(const t of this.paths)await p(t,this.options,this.options.logger)}async critters(){this.mergeDefaultOptions(r);for(const t of this.paths)await n(t,this.options,this.options.logger)}}export{a as default};
